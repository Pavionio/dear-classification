import streamlit as st
import pandas as pd
import numpy as np
import time
from ultralytics import YOLO
from glob import glob
import os
import zipfile
from PIL import Image, ImageFile
import shutil
from datetime import datetime
import pymorphy2

ImageFile.LOAD_TRUNCATED_IMAGES = True
morph = pymorphy2.MorphAnalyzer()
model = {'base': YOLO(r'base_model.pt'), 'pro': YOLO(r'advanced_model.pt')}
if 'mchoice' not in st.session_state:
    st.session_state['mchoice'] = 'base'
statistic = {
    "–û–ª–µ–Ω—å": 0,
    "–ö–æ—Å—É–ª—è": 0,
    "–ö–∞–±–∞—Ä–≥–∞": 0
}


def processing(files_list, mchoice):
    lst = []
    DIR = "processed"  # —Å–æ–∑–¥–∞—Ç—å
    if not (os.path.isdir(DIR)):
        os.mkdir(DIR)
    to_cedik = []
    for file in files_list:
        lst.append(f"{DIR}\{file.name}")
        with open(f"{DIR}\{file.name}", "wb") as f:
            f.write(file.getbuffer())
    results = model[mchoice](lst)
    names = model[mchoice].names
    for i in range(len(results)):
        # results[i].save(filename=DIR + '\\'
        #                          + 'processed_' + lst[i].split('\\')[-1])  # save to disk
        try:
            result = names[int(results[i].boxes.cls[0])]
            for j in range(len(results[i].boxes.conf)):
                if results[i].boxes.conf[j] > 0.3:
                    to_cedik.append(names[int(results[i].boxes.cls[j])])
        except IndexError:
            result = '–ù–µ_–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        if not (os.path.isdir(DIR + f"\\{result}")):
            os.mkdir(DIR + f"\\{result}")

        name = lst[i].split('\\')[-1]
        os.rename(lst[i], DIR + f"\{result}\{name}")

    files = glob(DIR + '\\*')
    with zipfile.ZipFile(f"{DIR}\\resulted.zip", "w") as zf:
        for filename in files:
            zf.write(filename)
            for f in glob(filename + '\\*'):
                zf.write(f)
            shutil.rmtree(filename, ignore_errors=True)
        zf.close()

    with open(f"{DIR}\\resulted.zip", "rb") as f:
        down = st.download_button(
            label="–ó–∞–≥—Ä—É–∑–∏—Ç—å",
            data=f,
            file_name=f"results_{datetime.now().strftime('%Y-%m-%dT%H:%M')}.zip",
            mime="application/zip"
        )
        if down:
            files.clear()
    os.remove(f"{DIR}\\resulted.zip")
    return to_cedik


st.set_page_config(
    page_title="–†–æ–≥–∞ –∏ –∫–æ–ø—ã—Ç–∞",
    page_icon="ü¶å",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title('–†–æ–≥–∞ –∏ –∫–æ–ø—ã—Ç–∞ v.0.1')
tab1, tab2, tab3 = st.tabs(["–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–î–æ–æ–±—É—á–µ–Ω–∏–µ"])

with tab1:
    st.subheader("–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    files = st.file_uploader("–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –≤–∞—à–∏ —Ñ–æ—Ç–æ (.png, .jpeg, .jpg)",
                             accept_multiple_files=True, type=["png", "jpeg", "jpg"])
    button2 = st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", key="312")

    if button2:
        with st.spinner('–û–±—Ä–∞–±–æ—Ç–∫–∞'):
            res = processing(files, st.session_state['mchoice'])
            for animal in res:
                statistic[animal] += 1
        st.toast('–ì–æ—Ç–æ–≤–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"', icon='üëç')
        st.info('–ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞–∂–º–∏—Ç–µ F5', icon="‚ÑπÔ∏è")

with tab2:
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    st.write(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:")
    for i in statistic.keys():
        st.write(f"~ {statistic[i]} {morph.parse(i)[0].make_agree_with_number(statistic[i]).word}")

with tab3:
    st.subheader("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è")
    choice = st.radio("–í–∏–¥ –∂–∏–≤–æ—Ç–Ω—ã—Ö:", ("–û–ª–µ–Ω—å", "–ö–æ—Å—É–ª—è", "–ö–∞–±–∞—Ä–≥–∞"))
    mchoice = st.session_state['mchoice']
    if choice:
        st.subheader("–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –∞—Ä—Ö–∏–≤")
        files2 = st.file_uploader("–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –≤–∞—à–∏ —Ñ–æ—Ç–æ (.png, .jpeg, .jpg)",
                                  accept_multiple_files=True, type=["png", "jpeg", "jpg"], key="12345")
        button1 = st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        st.warning(
            r'–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏, –ø–æ–º–µ–Ω—è–π—Ç–µ'
            r' –≤ —Ñ–∞–π–ª–µ "C:\Users\<–í–∞—à Username>\AppData\Roaming\U'
            r'ltralytics\settings.yaml" –Ω–∞—Å—Ç—Ä–æ–π–∫—É datasets_dir –Ω–∞ "<–ü–∞–ø–∫–∞ –≤ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É>/datasets"',
            icon="‚ö†Ô∏è")
        if button1:
            lst = []
            labels = []
            for file in files2:
                DIR = r"datasets\data\images\train"
                DIR1 = r"datasets\data\images\val"

                if not (os.path.isdir('datasets')):
                    os.mkdir('datasets')
                if not (os.path.isdir('datasets\data')):
                    os.mkdir('datasets\data')
                if not (os.path.isdir('datasets\data\images')):
                    os.mkdir('datasets\data\images')
                if not (os.path.isdir('datasets\data\labels')):
                    os.mkdir('datasets\data\labels')
                if not (os.path.isdir(r'datasets\data\images\train')):
                    os.mkdir(r'datasets\data\images\train')
                if not (os.path.isdir(r'datasets\data\labels\train')):
                    os.mkdir(r'datasets\data\labels\train')
                if not (os.path.isdir(r'datasets\data\images\val')):
                    os.mkdir(r'datasets\data\images\val')
                if not (os.path.isdir(r'datasets\data\labels\val')):
                    os.mkdir(r'datasets\data\labels\val')
                with open('data.yaml', 'w') as f:
                    f.write(
                        "path: ./data\ntrain: ./images/train\nval: ./images/val\nnames:\n  0: –ö–∞–±–∞—Ä–≥–∞\n  1: –ö–æ—Å—É–ª—è\n  2: –û–ª–µ–Ω—å")

                lst.append(f"{DIR1}\{file.name}")
                with open(f"{DIR1}\{file.name}", "wb") as f:
                    f.write(file.getbuffer())
                lst.append(f"{DIR}\{file.name}")
                with open(f"{DIR}\{file.name}", "wb") as f:
                    f.write(file.getbuffer())
            with st.spinner('–û–±—Ä–∞–±–æ—Ç–∫–∞'):
                results = model[mchoice](lst)
                for r in range(len(results)):
                    if choice == "–û–ª–µ–Ω—å":
                        coord = [2]
                    elif choice == "–ö–æ—Å—É–ª—è":
                        coord = [1]
                    else:
                        coord = [0]
                    coord = coord + results[r].boxes.xywhn[0].cpu().tolist()
                    print(coord)
                    nm = lst[r].split("\\")[-1]
                    with open(r"datasets\data\labels\val" + "\\" + nm.rstrip(nm.split(".")[-1]) + "txt", "w") as f:
                        f.write(" ".join(map(lambda x: str(x), coord)))
                    with open(r"datasets\data\labels\train" + "\\" + nm.rstrip(nm.split(".")[-1]) + "txt", "w") as f:
                        f.write(" ".join(map(lambda x: str(x), coord)))
                    labels.append(r"datasets\data\labels\train" + "\\" + nm.rstrip(nm.split(".")[-1]) + "txt")
                    labels.append(r"datasets\data\labels\val" + "\\" + nm.rstrip(nm.split(".")[-1]) + "txt")

                model[mchoice].train(data="data.yaml", epochs=1, batch=1)

                shutil.rmtree('datasets', ignore_errors=True)
            b = '–ë–∞–∑–æ–≤–∞—è'
            bb = 'base'
            p = '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è'
            st.toast(f'–ì–æ—Ç–æ–≤–æ! –ú–æ–¥–µ–ª—å "{b if mchoice == bb else p}" —É—Å–ø–µ—à–Ω–æ –¥–æ–æ–±—É—á–µ–Ω–∞!', icon='üëç')

with st.sidebar:
    option = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
        ("–ë–∞–∑–æ–≤–∞—è", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è"))
    if option == "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è":
        st.warning("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤", icon="‚ö†Ô∏è")
        st.session_state['mchoice'] = 'pro'
    elif option == "–ë–∞–∑–æ–≤–∞—è":
        st.session_state['mchoice'] = 'base'

